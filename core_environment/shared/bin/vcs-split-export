#!/usr/bin/env python
"""Export vcs workspace config per subdirectory."""

import argparse
import argcomplete
import logging
import os
import shlex
import subprocess
import yaml

try:
    from subtenv.__main__ import set_logger
    set_logger()
except ImportError:
    pass


log = logging.getLogger(__name__)


def is_git_repo(directory):
    """Check if directory is a git repository."""
    return os.path.exists(os.path.join(directory, '.git'))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--exact', action='store_true', default=False,
                        help="export exact commit")
    parser.add_argument('-c', '--workspace-config-path', default='./core_workspace',
                        help="path to core_workspace")
    argcomplete.autocomplete(parser)
    args = parser.parse_args() 

    # Compose vcs command
    vcscmd = 'vcs export'
    vcsarg = '--exact' if args.exact else ''

    # Check if we are in the top of workspace src directory
    if os.path.basename(os.getcwd()) != 'src':
        log.error("Please run this program at the top of workspace src directory")
        return

    # Make output directory
    log.info("Workspace config files will be written to: %s", args.workspace_config_path)
    try:
        os.makedirs(args.workspace_config_path)
    except OSError:
        pass
    else:
        log.info("Created target directory: %s", args.workspace_config_path)

    # Check subdirectories
    for subdir in os.listdir('.'):
        if not os.path.isdir(subdir):
            continue
        if os.path.basename(subdir) == 'core_workspace':
            continue
        if is_git_repo(subdir):
            log.error("You should not put the git repository at the top level. "
                      "Repository %s will not be in vcs configuration files.",
                      subdir)
            continue

        # Export repo info
        cmd = '{} {} {}'.format(vcscmd, vcsarg, subdir)
        config_str = subprocess.check_output(shlex.split(cmd))
        config = yaml.load(config_str, Loader=yaml.SafeLoader)

        # Prepend subdirectory name
        for repo in config['repositories'].keys():
            config['repositories'][os.path.join(subdir, repo)] \
                    = config['repositories'].pop(repo)

        # Write to file
        filename = os.path.join(args.workspace_config_path,
                                '{}{}.yaml'.format(subdir, '_exact' if args.exact else ''))
        with open(filename, 'w') as f:
            f.write(yaml.dump(config, default_flow_style=False))

        log.info("Export %d respositories to: %s",
                 len(config['repositories']), filename)

    # Show diff
    if is_git_repo(args.workspace_config_path):
        log.info("Showing diff")
        subprocess.check_call(['vcs', 'diff', args.workspace_config_path])


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='[%(levelname)5s] %(message)s')
    main()